import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import scipy.stats as stats
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de la p√°gina
st.set_page_config(
    layout="wide",
    page_title="TobiPets Dashboard",
    page_icon="üêï",
    initial_sidebar_state="expanded"
)

# Configurar estilo de matplotlib
plt.style.use('default')
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = 'white'

# CSS personalizado
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    font-weight: bold;
    color: #2E86AB;
    text-align: center;
    margin-bottom: 2rem;
}
.section-header {
    font-size: 1.5rem;
    font-weight: bold;
    color: #2E86AB;
    margin-top: 2rem;
    margin-bottom: 1rem;
}
.insight-box {
    background-color: #f8f9fa;
    padding: 1.5rem;
    border-radius: 0.5rem;
    border-left: 4px solid #2E86AB;
    margin: 1rem 0;
    color: #212529;
}
.success-box {
    background-color: #f8f9fa;
    padding: 1.5rem;
    border-radius: 0.5rem;
    border-left: 4px solid #28a745;
    margin: 1rem 0;
    color: #212529;
}
.question-box {
    background-color: #f8f9fa;
    padding: 1.5rem;
    border-radius: 0.5rem;
    border-left: 4px solid #6c757d;
    margin: 1rem 0;
    color: #212529;
}
</style>
""", unsafe_allow_html=True)

# Header principal
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    try:
        # Centrar la imagen usando HTML
        st.markdown(
            '<div style="display: flex; justify-content: center;">'
            '<img src="data:image/png;base64,{}" width="200">'
            '</div>'.format(
                __import__('base64').b64encode(
                    open('tobipets.png', 'rb').read()).decode()
            ),
            unsafe_allow_html=True
        )
    except:
        # Alternativa simple si no se puede cargar la imagen
        st.markdown(
            '<div style="text-align: center;">'
            '<p style="color: #666;">Logo TobiPets</p>'
            '</div>',
            unsafe_allow_html=True
        )
    st.markdown('<h1 class="main-header">TobiPets Analytics Dashboard</h1>',
                unsafe_allow_html=True)

# Funciones auxiliares


@st.cache_data
def load_data():
    """Carga y preprocesa los datos"""
    try:
        df = pd.read_excel('Assessment.xlsx', sheet_name='Data Ordenes')
        # Renombrar columnas
        column_mapping = {
            'Fecha': 'fecha',
            'Tipo de cliente': 'tipo_de_cliente',
            'Ingresos netos': 'ingresos_netos',
            'Estado': 'estado',
            'Art√≠culos vendidos': 'articulos_vendidos',
            'Cup√≥n(es)': 'cupones',
            'ID del Cliente': 'id_del_cliente',
            'Pedido #': 'pedido_numero'
        }
        df = df.rename(columns=column_mapping)

        # Preprocesamiento
        df['cupones'] = df['cupones'].fillna('Sin_cupon')
        df['usa_cupon'] = df['cupones'] != 'Sin_cupon'
        df['es_refund'] = df['estado'] == 'refunded'
        df['fecha'] = pd.to_datetime(df['fecha'])

        return df
    except Exception as e:
        st.error(f"Error cargando datos: {e}")
        st.info("Aseg√∫rate de tener el archivo 'Assessment.xlsx' en el directorio")
        return None


def create_kpi_cards(df_sales):
    """KPIs principales seg√∫n las preguntas espec√≠ficas"""
    total_ordenes = df_sales['pedido_numero'].nunique()
    valor_neto_total = df_sales['ingresos_netos'].sum()
    ticket_promedio = df_sales.groupby('id_del_cliente')[
        'ingresos_netos'].sum().mean()
    pct_por_tipo = df_sales['tipo_de_cliente'].value_counts(normalize=True)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Total de √ìrdenes", f"{total_ordenes:,}")

    with col2:
        st.metric("Valor Neto Total", f"‚Ç°{valor_neto_total:,.0f}")

    with col3:
        st.metric("Ticket Promedio por Cliente", f"‚Ç°{ticket_promedio:,.0f}")

    with col4:
        st.write("**% √ìrdenes por Tipo:**")
        for tipo, pct in pct_por_tipo.items():
            st.write(f"‚Ä¢ {tipo}: {pct:.1%}")


def analyze_inconsistencies(df):
    """An√°lisis de inconsistencias en los datos"""
    st.markdown("### Verificaci√≥n de Inconsistencias")

    col1, col2 = st.columns(2)

    with col1:
        st.write("**Pedidos con 0 art√≠culos:**")
        zero_articles = (df['articulos_vendidos'] == 0).sum()
        st.metric("Pedidos con 0 art√≠culos", zero_articles)

        if zero_articles > 0:
            zero_df = df[df['articulos_vendidos'] == 0]
            st.write("Detalles:")
            st.dataframe(
                zero_df[['pedido_numero', 'estado', 'tipo_de_cliente', 'ingresos_netos']])

    with col2:
        st.write("**Valores negativos/cero:**")
        negative_income = (df['ingresos_netos'] < 0).sum()
        zero_income = (df['ingresos_netos'] == 0).sum()
        st.metric("Ingresos negativos", negative_income)
        st.metric("Ingresos = 0", zero_income)

        st.write("**Valores faltantes:**")
        nulls = df.isnull().sum()
        st.write(nulls[nulls > 0] if nulls.sum() >
                 0 else "No hay valores faltantes")


def create_evolution_plot(df_sales):
    """Evoluci√≥n semanal del valor neto"""
    df_sales['semana'] = df_sales['fecha'].dt.to_period(
        'W').apply(lambda r: r.start_time)
    weekly = df_sales.groupby('semana')['ingresos_netos'].sum().reset_index()
    weekly['ingresos_k'] = weekly['ingresos_netos'] / 1000

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(weekly['semana'], weekly['ingresos_k'], marker='o',
            linewidth=3, markersize=8, color='#2E86AB')
    ax.set_title('Evoluci√≥n Semanal del Valor Neto',
                 fontsize=14, fontweight='bold')
    ax.set_ylabel('Valor Neto (miles $)', fontsize=12)
    ax.set_xlabel('Semana', fontsize=12)
    ax.grid(True, alpha=0.3)
    ax.tick_params(axis='x', rotation=45)

    # A√±adir etiquetas de valor
    for x, y in zip(weekly['semana'], weekly['ingresos_k']):
        ax.text(x, y + 0.5, f'{y:.1f}K', ha='center', va='bottom', fontsize=9)

    plt.tight_layout()
    return fig


def create_orders_by_status_plot(df):
    """Cantidad de √≥rdenes por estado"""
    estado_counts = df['estado'].value_counts().reset_index()
    estado_counts.columns = ['estado', 'n_ordenes']
    estado_counts['pct'] = 100 * estado_counts['n_ordenes'] / \
        estado_counts['n_ordenes'].sum()

    fig, ax = plt.subplots(figsize=(8, 5))
    bars = ax.bar(estado_counts['estado'], estado_counts['n_ordenes'],
                  color=['#2E86AB', '#A23B72', '#F18F01'])

    # A√±adir etiquetas de porcentaje
    for i, (bar, row) in enumerate(zip(bars, estado_counts.itertuples())):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 5,
                f'{row.pct:.1f}%', ha='center', va='bottom', fontweight='bold')

    ax.set_title('Distribuci√≥n de √ìrdenes por Estado', fontweight='bold')
    ax.set_xlabel('Estado')
    ax.set_ylabel('N√∫mero de √ìrdenes')
    ax.grid(axis='y', linestyle='--', alpha=0.3)
    plt.tight_layout()
    return fig


def analyze_customer_value(df_sales):
    """An√°lisis de valor por tipo de cliente"""
    # M√©tricas por tipo de cliente
    customer_metrics = df_sales.groupby('tipo_de_cliente')['ingresos_netos'].agg([
        'count', 'mean', 'median', 'std', 'sum'
    ]).round(2)
    customer_metrics.columns = ['√ìrdenes',
                                'Promedio', 'Mediana', 'Std', 'Total']

    # Test estad√≠stico
    new_values = df_sales[df_sales['tipo_de_cliente']
                          == 'new']['ingresos_netos']
    returning_values = df_sales[df_sales['tipo_de_cliente']
                                == 'returning']['ingresos_netos']
    t_stat, p_value = stats.ttest_ind(
        new_values, returning_values, equal_var=False)

    col1, col2 = st.columns(2)

    with col1:
        st.write("**M√©tricas por Tipo de Cliente:**")
        st.dataframe(customer_metrics)

        if p_value < 0.05:
            st.success(
                f"‚úÖ Diferencia estad√≠sticamente significativa (p={p_value:.4f})")
        else:
            st.warning(f"‚ö†Ô∏è Diferencia NO significativa (p={p_value:.4f})")

    with col2:
        # Histograma de distribuci√≥n por tipo de cliente
        fig, ax = plt.subplots(figsize=(8, 5))

        # Separar datos por tipo de cliente
        new_data = df_sales[df_sales['tipo_de_cliente']
                            == 'new']['ingresos_netos']
        returning_data = df_sales[df_sales['tipo_de_cliente']
                                  == 'returning']['ingresos_netos']

        # Crear histograma superpuesto
        bins = np.linspace(df_sales['ingresos_netos'].min(
        ), df_sales['ingresos_netos'].max(), 25)

        ax.hist(new_data, bins=bins, alpha=0.7, label='new',
                color='lightblue', edgecolor='black')
        ax.hist(returning_data, bins=bins, alpha=0.7,
                label='returning', color='darkblue', edgecolor='black')

        ax.set_xlabel('Ingresos Netos')
        ax.set_ylabel('Frecuencia')
        ax.set_title('Distribuci√≥n de Ingresos por Tipo de Cliente')
        ax.legend()
        ax.grid(True, alpha=0.3)

        # Formatear eje x para mostrar valores en miles
        ax.xaxis.set_major_formatter(
            FuncFormatter(lambda x, p: f'‚Ç°{x/1000:.0f}K'))

        plt.tight_layout()
        st.pyplot(fig)

    return customer_metrics


def analyze_coupon_impact(df_sales):
    """An√°lisis del impacto de cupones"""
    # Valor promedio por uso de cup√≥n
    coupon_analysis = df_sales.groupby('usa_cupon').agg({
        'ingresos_netos': ['mean', 'count'],
        'articulos_vendidos': 'mean'
    }).round(2)

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

    # Gr√°fico 1: Valor promedio
    avg_by_coupon = df_sales.groupby('usa_cupon')['ingresos_netos'].mean()
    labels = ['Sin Cup√≥n', 'Con Cup√≥n']
    bars1 = ax1.bar(labels, avg_by_coupon.values, color=['#FFB3BA', '#BAFFC9'])
    ax1.set_title('Valor Neto Promedio por Uso de Cup√≥n')
    ax1.set_ylabel('Valor Promedio ($)')

    for bar, value in zip(bars1, avg_by_coupon.values):
        ax1.text(bar.get_x() + bar.get_width()/2., value + 500,
                 f'${value:,.0f}', ha='center', va='bottom', fontweight='bold')

    # Gr√°fico 2: Art√≠culos promedio
    avg_articles = df_sales.groupby('usa_cupon')['articulos_vendidos'].mean()
    bars2 = ax2.bar(labels, avg_articles.values, color=['#FFD93D', '#6BCF7F'])
    ax2.set_title('Art√≠culos Promedio por Uso de Cup√≥n')
    ax2.set_ylabel('Art√≠culos Promedio')

    for bar, value in zip(bars2, avg_articles.values):
        ax2.text(bar.get_x() + bar.get_width()/2., value + 0.1,
                 f'{value:.1f}', ha='center', va='bottom', fontweight='bold')

    plt.tight_layout()
    return fig, coupon_analysis


def analyze_articles_by_status(df):
    """An√°lisis de art√≠culos promedio por estado"""
    articles_by_status = df.groupby(
        'estado')['articulos_vendidos'].mean().reset_index()
    articles_by_status.columns = ['estado', 'promedio_articulos']

    fig, ax = plt.subplots(figsize=(8, 5))
    bars = ax.bar(articles_by_status['estado'], articles_by_status['promedio_articulos'],
                  color=['#2E86AB', '#A23B72', '#FF6B6B'])

    ax.set_title('Promedio de Art√≠culos por Estado de Orden')
    ax.set_ylabel('Art√≠culos Promedio')

    for bar, row in zip(bars, articles_by_status.itertuples()):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{row.promedio_articulos:.2f}', ha='center', va='bottom', fontweight='bold')

    plt.tight_layout()
    return fig, articles_by_status


def analyze_returning_customers(df_sales):
    """An√°lisis espec√≠fico de clientes returning"""
    df_return = df_sales[df_sales['tipo_de_cliente'] == 'returning']

    metrics = {
        "% √ìrdenes returning": df_return['pedido_numero'].nunique() / df_sales['pedido_numero'].nunique() * 100,
        "% Ingresos returning": df_return['ingresos_netos'].sum() / df_sales['ingresos_netos'].sum() * 100,
        "% Uso de cup√≥n (returning)": df_return['usa_cupon'].mean() * 100,
        "Ticket promedio (returning)": df_return['ingresos_netos'].mean(),
        "Art√≠culos promedio (returning)": df_return['articulos_vendidos'].mean()
    }

    return metrics


# Cargar datos
df = load_data()
if df is None:
    st.stop()

# Separar datos
df_sales = df[~df['es_refund']].copy()
df_refunds = df[df['es_refund']].copy()

# Tabs principales
tab1, tab2, tab3 = st.tabs([
    "Secci√≥n 1: An√°lisis Exploratorio",
    "Secci√≥n 2: Insights de Comportamiento",
    "Secci√≥n 3: Casos de Negocio"
])

# TAB 1: An√°lisis Exploratorio
with tab1:
    st.markdown('<h2 class="section-header">Secci√≥n 1: An√°lisis Exploratorio</h2>',
                unsafe_allow_html=True)

    # Informaci√≥n del dataset
    st.markdown("### Informaci√≥n General del Dataset")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Filas", df.shape[0])
    with col2:
        st.metric("Columnas", df.shape[1])
    with col3:
        st.metric("Duplicados", df.duplicated().sum())

    # Verificaci√≥n de inconsistencias
    analyze_inconsistencies(df)

    # KPIs principales
    st.markdown('<h3 class="section-header">KPIs Principales</h3>',
                unsafe_allow_html=True)
    create_kpi_cards(df_sales)

    # Visualizaciones principales
    st.markdown('<h3 class="section-header">Visualizaciones</h3>',
                unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Evoluci√≥n Semanal del Valor Neto**")
        fig_evolution = create_evolution_plot(df_sales)
        st.pyplot(fig_evolution)

    with col2:
        st.markdown("**√ìrdenes por Estado**")
        fig_status = create_orders_by_status_plot(df)
        st.pyplot(fig_status)

# TAB 2: Insights de Comportamiento
with tab2:
    st.markdown('<h2 class="section-header">Secci√≥n 2: Insights de Comportamiento</h2>',
                unsafe_allow_html=True)

    # Pregunta 1: Valor por tipo de cliente
    st.markdown("""
    <div class="question-box">
    <h4>¬øQu√© tipo de cliente (new vs returning) genera mayor valor neto por orden?</h4>
    </div>
    """, unsafe_allow_html=True)

    customer_metrics = analyze_customer_value(df_sales)

    returning_avg = customer_metrics.loc['returning', 'Promedio']
    new_avg = customer_metrics.loc['new', 'Promedio']

    st.markdown(f"""
    <div class="insight-box">
    <h4>Respuesta:</h4>
    <p>Los clientes <strong>returning</strong> generan mayor valor promedio por orden: <strong>‚Ç°{returning_avg:,.0f}</strong> vs <strong>‚Ç°{new_avg:,.0f}</strong> de los nuevos.</p>
    <p>Esto representa una diferencia del <strong>{((returning_avg/new_avg - 1) * 100):.1f}%</strong> m√°s valor por orden.</p>
    </div>
    """, unsafe_allow_html=True)

    # Pregunta 2: Diferencias por uso de cupones
    st.markdown("""
    <div class="question-box">
    <h4>¬øHay diferencias en valor neto o cantidad de art√≠culos entre quienes usan cupones y quienes no?</h4>
    </div>
    """, unsafe_allow_html=True)

    fig_coupon, coupon_analysis = analyze_coupon_impact(df_sales)
    st.pyplot(fig_coupon)

    with_coupon_avg = df_sales[df_sales['usa_cupon']]['ingresos_netos'].mean()
    without_coupon_avg = df_sales[~df_sales['usa_cupon']
                                  ]['ingresos_netos'].mean()

    st.markdown(f"""
    <div class="insight-box">
    <h4>Respuesta:</h4>
    <p><strong>Valor Neto:</strong> Los pedidos con cup√≥n tienen un valor promedio de <strong>‚Ç°{with_coupon_avg:,.0f}</strong> vs <strong>‚Ç°{without_coupon_avg:,.0f}</strong> sin cup√≥n.</p>
    <p><strong>Conclusi√≥n:</strong> {'Los cupones aumentan' if with_coupon_avg > without_coupon_avg else 'Los cupones reducen'} el valor promedio del pedido.</p>
    </div>
    """, unsafe_allow_html=True)

    # Pregunta 3: Art√≠culos por estado
    st.markdown("""
    <div class="question-box">
    <h4>¬øCu√°l es el promedio de art√≠culos por orden seg√∫n el estado? ¬øDetect√°s alguna anomal√≠a?</h4>
    </div>
    """, unsafe_allow_html=True)

    fig_articles, articles_data = analyze_articles_by_status(df)
    st.pyplot(fig_articles)

    refunded_avg = articles_data[articles_data['estado']
                                 == 'refunded']['promedio_articulos'].iloc[0]
    completed_avg = articles_data[articles_data['estado']
                                  == 'completed']['promedio_articulos'].iloc[0]

    st.markdown(f"""
    <div class="insight-box">
    <h4>Respuesta:</h4>
    <p><strong>Anomal√≠a detectada:</strong> Los pedidos refunded tienen un promedio de <strong>{refunded_avg:.2f} art√≠culos</strong>, mucho menor que los completed (<strong>{completed_avg:.2f} art√≠culos</strong>).</p>
    <p>Esto sugiere que muchos refunds son de pedidos que nunca se procesaron correctamente (0 art√≠culos).</p>
    </div>
    """, unsafe_allow_html=True)

    # Pregunta 4: Estrategia para clientes nuevos
    st.markdown("""
    <div class="question-box">
    <h4>¬øQu√© har√≠as para que estos clientes nuevos vuelvan a comprar en menos de 35 d√≠as?</h4>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div class="success-box">
    <h4>Estrategia de Retenci√≥n para Clientes Nuevos:</h4>
    
    <p><strong>1. Welcome Series Automation (D√≠as 1-7):</strong></p>
    <ul>
        <li>Email de bienvenida con gu√≠a de productos personalizados</li>
        <li>Contenido educativo sobre cuidado de mascotas basado en primera compra</li>
        <li>Cup√≥n de 10% para segunda compra con urgencia (v√°lido 7 d√≠as)</li>
        <li><em>Data Science:</em> Segmentaci√≥n autom√°tica por tipo de mascota y productos comprados</li>
    </ul>
    
    <p><strong>2. Engagement Touchpoints (D√≠as 8-21):</strong></p>
    <ul>
        <li>SMS con tips personalizados seg√∫n su mascota y productos anteriores</li>
        <li>Push notifications de productos complementarios</li>
        <li>Invitaci√≥n a programa de lealtad con beneficios inmediatos</li>
        <li><em>Data Science:</em> Sistema de recomendaciones basado en clientes similares</li>
    </ul>
    
    <p><strong>3. Reactivation Campaign (D√≠as 22-35):</strong></p>
    <ul>
        <li>Email con productos recomendados basados en primera compra</li>
        <li>Oferta escalada: "Vuelve en 7 d√≠as y obt√©n 15% off + env√≠o gratis"</li>
        <li>Retargeting ads en redes sociales con productos vistos</li>
        <li><em>Data Science:</em> Modelo predictivo para identificar clientes en riesgo de no volver</li>
    </ul>
    
    <p><strong>4. Monitoreo y Optimizaci√≥n:</strong></p>
    <ul>
        <li>A/B testing en cada fase para optimizar conversi√≥n</li>
        <li>Dashboard en tiempo real para tracking de m√©tricas clave</li>
        <li>An√°lisis de cohortes para medir efectividad de cada intervenci√≥n</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)

    # Pregunta 5: An√°lisis de clientes returning
    st.markdown("""
    <div class="question-box">
    <h4>¬øQu√© notas de los clientes Returning?</h4>
    </div>
    """, unsafe_allow_html=True)

    returning_metrics = analyze_returning_customers(df_sales)

    col1, col2 = st.columns(2)

    with col1:
        for metric, value in list(returning_metrics.items())[:3]:
            if "%" in metric:
                st.metric(metric, f"{value:.1f}%")
            else:
                st.metric(metric, f"‚Ç°{value:,.0f}")

    with col2:
        for metric, value in list(returning_metrics.items())[3:]:
            if "%" in metric:
                st.metric(metric, f"{value:.1f}%")
            else:
                st.metric(metric, f"{value:.2f}")

    st.markdown(f"""
    <div class="insight-box">
    <h4>Observaciones sobre Clientes Returning:</h4>
    <ul>
        <li><strong>Dominancia:</strong> Representan el {returning_metrics['% √ìrdenes returning']:.1f}% de las √≥rdenes pero generan el {returning_metrics['% Ingresos returning']:.1f}% de los ingresos</li>
        <li><strong>Valor Superior:</strong> Su ticket promedio (‚Ç°{returning_metrics['Ticket promedio (returning)']:,.0f}) es {((customer_metrics.loc['returning', 'Promedio']/customer_metrics.loc['new', 'Promedio'] - 1) * 100):.1f}% mayor que nuevos</li>
        <li><strong>Uso de Cupones:</strong> {returning_metrics['% Uso de cup√≥n (returning)']:.1f}% usa cupones vs {df_sales[df_sales['tipo_de_cliente'] == 'new']['usa_cupon'].mean()*100:.1f}% de nuevos</li>
        <li><strong>Comportamiento:</strong> Compran m√°s art√≠culos por orden ({returning_metrics['Art√≠culos promedio (returning)']:.2f} vs {df_sales[df_sales['tipo_de_cliente'] == 'new']['articulos_vendidos'].mean():.2f})</li>
        <li><strong>Implicaci√≥n:</strong> Son el motor del negocio - requieren estrategias de retenci√≥n premium</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)

# TAB 3: Casos de Negocio
with tab3:
    st.markdown('<h2 class="section-header">Secci√≥n 3: Casos de Negocio</h2>',
                unsafe_allow_html=True)

    # Caso 1: Cupones y Refunds
    st.markdown('<h3 class="section-header">Caso 1: Cupones y Refunds</h3>',
                unsafe_allow_html=True)

    st.markdown("""
    <div class="question-box">
    <h4>Contexto:</h4>
    <p>El √°rea comercial quiere entender si los cupones est√°n ayudando a aumentar las ventas o simplemente canibalizan ingresos. Tambi√©n quieren reducir reembolsos.</p>
    </div>
    """, unsafe_allow_html=True)

    # An√°lisis de cupones
    coupon_usage_pct = df_sales['usa_cupon'].mean() * 100
    coupon_types = df_sales[df_sales['usa_cupon']]['cupones'].value_counts()

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**% de √≥rdenes que utilizan cupones:**")
        st.metric("Uso de Cupones", f"{coupon_usage_pct:.1f}%")

        st.markdown("**Tipo de cup√≥n m√°s frecuente:**")
        most_frequent = coupon_types.index[0]
        st.metric("M√°s usado", most_frequent)
        st.write(f"({coupon_types.iloc[0]} √≥rdenes)")

    with col2:
        fig, ax = plt.subplots(figsize=(6, 4))
        coupon_types.plot(kind='bar', ax=ax, color='skyblue')
        ax.set_title('Frecuencia por Tipo de Cup√≥n')
        ax.set_ylabel('N√∫mero de √ìrdenes')
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)

    # An√°lisis de valor con/sin cup√≥n
    st.markdown("**Valor neto promedio: con vs sin cup√≥n**")
    with_coupon = df_sales[df_sales['usa_cupon']]['ingresos_netos'].mean()
    without_coupon = df_sales[~df_sales['usa_cupon']]['ingresos_netos'].mean()

    col1, col2 = st.columns(2)
    with col1:
        st.metric("Con Cup√≥n", f"‚Ç°{with_coupon:,.0f}")
    with col2:
        st.metric("Sin Cup√≥n", f"‚Ç°{without_coupon:,.0f}")

    # An√°lisis de refunds
    st.markdown("**Patrones en √≥rdenes reembolsadas:**")

    if len(df_refunds) > 0:
        refund_by_customer = df_refunds['tipo_de_cliente'].value_counts(
            normalize=True) * 100
        refund_by_coupon = df_refunds['usa_cupon'].value_counts(
            normalize=True) * 100

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Total Refunds", len(df_refunds))
            st.metric("% del Total", f"{len(df_refunds)/len(df)*100:.1f}%")

        with col2:
            st.write("**Por tipo de cliente:**")
            for tipo, pct in refund_by_customer.items():
                st.write(f"‚Ä¢ {tipo}: {pct:.1f}%")

        with col3:
            st.write("**Por uso de cup√≥n:**")
            st.write(f"‚Ä¢ Con cup√≥n: {refund_by_coupon.get(True, 0):.1f}%")
            st.write(f"‚Ä¢ Sin cup√≥n: {refund_by_coupon.get(False, 0):.1f}%")

    # Recomendaciones para el equipo comercial
    coupon_impact = "aumentan" if with_coupon > without_coupon else "reducen"
    coupon_diff = abs(with_coupon - without_coupon) / without_coupon * 100

    st.markdown(f"""
    <div class="success-box">
    <h4>2 Acciones Recomendadas para el Equipo Comercial:</h4>
    <ol>
        <li><strong>Optimizar Estrategia de Cupones:</strong>
            <ul>
                <li>Los cupones {coupon_impact} el valor promedio del pedido en {coupon_diff:.1f}%</li>
                <li>Enfocar cupon_autoship (m√°s frecuente) en clientes returning de alto valor</li>
                <li>Implementar cupones condicionales: "Compra +$50,000 y obt√©n 10% off"</li>
                <li>A/B testing: cupones por porcentaje vs valor fijo</li>
            </ul>
        </li>
        <li><strong>Programa de Prevenci√≥n de Refunds:</strong>
            <ul>
                <li>Implementar alertas tempranas para pedidos con 0 art√≠culos</li>
                <li>Quality check autom√°tico antes del env√≠o</li>
                <li>Follow-up proactivo 48h post-compra para clientes nuevos</li>
                <li>Sistema de feedback inmediato para detectar problemas</li>
            </ul>
        </li>
    </ol>
    </div>
    """, unsafe_allow_html=True)

    # Caso 2: AutoShip
    st.markdown('<h3 class="section-header">Caso 2: Estrategia AutoShip</h3>',
                unsafe_allow_html=True)

    st.markdown("""
    <div class="question-box">
    <h4>Contexto:</h4>
    <p>Convertir a un cliente existente (7 compras, 5 mascotas) en usuario de AutoShip.</p>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div class="insight-box">
    <h4>Perfil del Cliente Objetivo</h4>
    <ul>
        <li><strong>Historial:</strong> 7 compras realizadas</li>
        <li><strong>Mascotas:</strong> 5 mascotas (alta necesidad recurrente)</li>
        <li><strong>Comportamiento:</strong> Cliente leal pero manual</li>
        <li><strong>Pain Point:</strong> Reordenar constantemente los mismos productos</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        ### Argumentos de Persuasi√≥n
        
        **Comodidad Total**
        - "Olv√≠date de quedarte sin comida para tus 5 mascotas"
        - "Programamos tus entregas seg√∫n tu cronograma hist√≥rico"
        - "Ajustes autom√°ticos basados en tus 7 compras anteriores"
        
        **Beneficios Econ√≥micos Reales**
        - 6% descuento autom√°tico en cada env√≠o AutoShip
        - Env√≠o gratuito en todas las entregas
        - Si el precio baja, pagas el precio menor autom√°ticamente
        
        **Flexibilidad y Control**
        - Modifica, pausa o cancela cuando quieras
        - Cambio de productos con un clic
        - Alertas 5 d√≠as antes de cada env√≠o para hacer cambios
        """)

    with col2:
        st.markdown("""
        ### Proceso de Acercamiento
        
        **Semana 1: Email Personalizado**
        - Analizar sus 7 compras anteriores para identificar patrones
        - Crear plan AutoShip basado en su frecuencia hist√≥rica
        - Simulador de ahorros: mostrar ahorro proyectado anual
        
        **Semana 2: Demo Interactiva**
        - Customer Success Manager hace demo personalizada
        - Configuraci√≥n en vivo basada en sus datos reales
        - C√°lculo en tiempo real de frecuencia √≥ptima por producto
        
        **Semana 3: Seguimiento Inteligente**
        - Recordatorios basados en su comportamiento de navegaci√≥n
        - Ofertas ajustadas seg√∫n su propensi√≥n a convertir
        - Casos de √©xito de clientes con perfil similar
        
        **Optimizaci√≥n Continua**
        - A/B testing del proceso para maximizar conversi√≥n
        - An√°lisis de abandono para mejorar la experiencia
        - Tracking de m√©tricas de adopci√≥n y satisfacci√≥n
        """)

    # Proyecci√≥n ROI con datos reales
    st.markdown("### Proyecci√≥n de Impacto (Basada en Datos)")

    avg_ticket = df_sales['ingresos_netos'].mean()
    monthly_frequency = 1.5
    autoship_discount = 0.06  # 6% seg√∫n la informaci√≥n real
    retention_boost = 0.30  # 30% m√°s retenci√≥n (estimado)

    col1, col2, col3 = st.columns(3)

    with col1:
        current_ltv = avg_ticket * monthly_frequency * 12
        st.metric(
            "LTV Actual (12 meses)",
            f"‚Ç°{current_ltv:,.0f}",
            delta="Cliente t√≠pico"
        )

    with col2:
        autoship_ltv = avg_ticket * monthly_frequency * \
            (1 - autoship_discount) * (1 + retention_boost) * 12
        st.metric(
            "LTV con AutoShip",
            f"‚Ç°{autoship_ltv:,.0f}",
            delta=f"+{retention_boost*100:.0f}% retenci√≥n"
        )

    with col3:
        net_gain = autoship_ltv - current_ltv
        st.metric(
            "Ganancia Neta Anual",
            f"‚Ç°{net_gain:,.0f}",
            delta="Por cliente convertido"
        )

    # Timeline de implementaci√≥n
    st.markdown("### Timeline de Conversi√≥n")

    timeline_data = {
        'D√≠a': ['D√≠a 1', 'D√≠a 3', 'D√≠a 7', 'D√≠a 14', 'D√≠a 21'],
        'Canal': ['Email', 'Web Demo', 'Llamada', 'SMS', 'Retargeting'],
        'Mensaje Clave': [
            'Plan AutoShip basado en tus 7 compras',
            'Simulador de ahorros personalizado',
            'Demo en vivo + configuraci√≥n',
            'Recordatorio: ahorros proyectados',
            'Casos de √©xito + √∫ltima oportunidad'
        ],
        'M√©trica Objetivo': ['30% open rate', '20% click rate', '15% conversi√≥n', '10% reactivaci√≥n', '5% conversi√≥n final']
    }
    timeline_df = pd.DataFrame(timeline_data)
    st.dataframe(timeline_df, use_container_width=True)

    # Caso 3: Manejo de Rese√±as Negativas
    st.markdown('<h3 class="section-header">Caso 3: Manejo de Rese√±as Negativas</h3>',
                unsafe_allow_html=True)

    st.markdown("""
    <div class="question-box">
    <h4>Contexto:</h4>
    <p>Un cliente reciente tuvo una experiencia insatisfactoria, dej√≥ rese√±a negativa en el sitio web y se queja en redes sociales.</p>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div class="success-box">
    <h4>Estrategia de Manejo de Crisis de Reputaci√≥n:</h4>
    
    <p><strong>Fase 1: Respuesta Inmediata (< 2 horas)</strong></p>
    <ul>
        <li>Respuesta p√∫blica emp√°tica agradeciendo el feedback espec√≠fico</li>
        <li>Disculpa sincera sin excusas o justificaciones</li>
        <li>Invitaci√≥n a contacto privado para resoluci√≥n inmediata</li>
        <li>Demostraci√≥n de compromiso con la mejora continua</li>
    </ul>
    
    <p><strong>Fase 2: Resoluci√≥n Privada (< 24 horas)</strong></p>
    <ul>
        <li>Investigaci√≥n completa del historial del pedido espec√≠fico</li>
        <li>Contacto telef√≥nico personalizado del Customer Success</li>
        <li>Oferta de soluci√≥n inmediata (reemplazo express/reembolso completo)</li>
        <li>Compensaci√≥n adicional apropiada (cup√≥n 20-25%)</li>
    </ul>
    
    <p><strong>Fase 3: Seguimiento y Prevenci√≥n</strong></p>
    <ul>
        <li>Implementaci√≥n de mejoras en procesos internos identificados</li>
        <li>Comunicaci√≥n transparente de cambios realizados</li>
        <li>Seguimiento proactivo de satisfacci√≥n del cliente</li>
        <li>Monitoreo automatizado para prevenir casos similares</li>
    </ul>
    
    <p><strong>Elementos de Data Science aplicables:</strong></p>
    <ul>
        <li><strong>Social Listening:</strong> Algoritmos para detectar menciones negativas autom√°ticamente</li>
        <li><strong>Sentiment Analysis:</strong> Clasificaci√≥n autom√°tica de severidad de quejas</li>
        <li><strong>Predictive Analytics:</strong> Identificar productos/procesos con mayor riesgo de generar quejas</li>
        <li><strong>A/B Testing:</strong> Optimizar templates de respuesta para maximizar satisfacci√≥n</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666; font-size: 0.9rem;'>"
    "<strong>TobiPets Analytics Dashboard</strong> | "
    f"√öltima actualizaci√≥n: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M')} | "
    "Desarrollado por Jorge"
    "</div>",
    unsafe_allow_html=True
)
