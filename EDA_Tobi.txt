import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as stats
import warnings
warnings.filterwarnings('ignore')
from matplotlib.ticker import FuncFormatter


df = pd.read_excel('Assessment.xlsx', sheet_name='Data Ordenes')

df.shape

df.dtypes

df = df.rename(columns={
    'Fecha':              'fecha',
    'Tipo de cliente':    'tipo_de_cliente',
    'Ingresos netos':     'ingresos_netos',
    'Estado':             'estado',
    'Artículos vendidos': 'articulos_vendidos',
    'Cupón(es)':          'cupones',
    'ID del Cliente':     'id_del_cliente',
    'Pedido #':           'pedido_numero'
})


df.nunique().sort_values()

df.head()

df.sample(5)

df_non_date = df.select_dtypes(exclude=['datetime64[ns]'])

df_non_date.describe(include='all').T

df.isnull().sum()

df[df['cupones'].isnull()]

df['cupones'].unique()

df['cupones'] = df['cupones'].fillna('Sin_cupon')

df['cupones'].isnull().sum()

df['cupones'].unique()

df.duplicated().sum()

# Pedidos con 0 articulos vendidos
(df['articulos_vendidos'] == 0).sum()

df_zero = df[df['articulos_vendidos'] == 0]
df_zero

# ids de clientes de las ordenes anteriores con refunds y 0 articulos vendidos
ids_refund = df_zero['id_del_cliente'].unique()
ids_refund.tolist()

# df de historial de esos ids cliente
historial_clientes = df[df['id_del_cliente'].isin(ids_refund)]

# verificar si existen mas ordenes con esos ids y en que fecha
historial_clientes.sort_values(['id_del_cliente', 'fecha'])

# — Pedidos con ingresos netos negativos
(df['ingresos_netos'] < 0).sum()

# — Pedidos con ingresos netos exactamente cero
(df['ingresos_netos'] == 0).sum()

# se crea una columna de True False para es refund
df['es_refund'] = df['estado'] == 'refunded'

# Checar que el estado sea true unicamente para refunded
df[['estado', 'es_refund']].drop_duplicates().reset_index(drop=True)

df

# Asegúrate de filtrar las devoluciones primero
df_sales = df[df['es_refund'] == False]

# Calcular KPIs
total_ordenes    = df_sales['pedido_numero'].nunique()
valor_neto_total = df_sales['ingresos_netos'].sum()
ticket_promedio  = df_sales.groupby('id_del_cliente')['ingresos_netos'].sum().mean()
pct_por_tipo     = df_sales['tipo_de_cliente'].value_counts(normalize=True)

# Mostrar cada uno explícitamente
print("Total de órdenes efectivas:", total_ordenes)
print("Valor neto total:", valor_neto_total)
print("Ticket promedio por cliente:", ticket_promedio)
print("Porcentaje de órdenes por tipo de cliente:\n", pct_por_tipo)


# 1. Filtrar ventas efectivas
df_sales = df[df['estado'] != 'refunded'].copy()

# 2. Preparar datos
df_sales['semana'] = df_sales['fecha'].dt.to_period('W').apply(lambda r: r.start_time)
weekly = df_sales.groupby('semana')['ingresos_netos'].sum().reset_index()
weekly['ingresos_k'] = weekly['ingresos_netos'] / 1000  # convertir a miles

# 3. Función para formatear eje Y en miles ("K")
formatter = FuncFormatter(lambda x, pos: f'{int(x)}K')

# 4. Gráfico con etiquetas de valor
plt.figure(figsize=(10,5))
ax = sns.lineplot(data=weekly, x='semana', y='ingresos_k', marker='o', linewidth=2)
ax.yaxis.set_major_formatter(formatter)

# Añadir etiqueta con el valor encima de cada punto (fontsize como entero)
for x, y in zip(weekly['semana'], weekly['ingresos_k']):
    ax.text(
        x, y + 0.5,        # Desplazamiento vertical
        f'{y:.1f}K',       # Texto formateado
        ha='center',       # Alineación horizontal
        va='bottom',       # Alineación vertical
        fontsize=9         # Tamaño de fuente como entero
    )

plt.title('Evolución semanal del ingreso neto (miles)')
plt.xlabel('Semana')
plt.ylabel('Ingreso neto')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()



# 1. Filtrar ventas efectivas y preparar df_sales
df_sales = df[df['estado'] != 'refunded'].copy()
df_sales['semana']     = df_sales['fecha'].dt.to_period('W').apply(lambda r: r.start_time)
df_sales['dia_nombre'] = df_sales['fecha'].dt.day_name()

# 2. Definir el orden natural de los días
weekday_order = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']

# 3. Convertir a categoría ordenada
df_sales['dia_nombre'] = pd.Categorical(
    df_sales['dia_nombre'],
    categories=weekday_order,
    ordered=True
)

# 4. Agrupar por semana y día
weekly_daily = (
    df_sales
    .groupby(['semana','dia_nombre'])['ingresos_netos']
    .sum()
    .reset_index()
)

# 5. Dibujar small multiples con el orden correcto en el eje X
semanas = sorted(weekly_daily['semana'].unique())
cols = 2
rows = (len(semanas) + cols - 1) // cols

fig, axes = plt.subplots(rows, cols, figsize=(12, rows*3), sharey=True)
axes = axes.flatten()

for ax, semana in zip(axes, semanas):
    data = weekly_daily[weekly_daily['semana']==semana]
    sns.lineplot(
        data=data,
        x='dia_nombre',
        y='ingresos_netos',
        marker='o',
        linewidth=2,
        ax=ax
    )
    ax.set_title(f'Semana {semana.date()}')
    ax.set_xlabel('')
    ax.set_ylabel('Ingresos netos')
    ax.tick_params(axis='x', rotation=45)

    # Etiquetas de valor
    for x, y in zip(data['dia_nombre'], data['ingresos_netos']):
        ax.text(
            x, y + data['ingresos_netos'].max()*0.02,
            f'{y:,.0f}',
            ha='center',
            va='bottom',
            fontsize=8
        )

# Ocultar ejes sobrantes
for ax in axes[len(semanas):]:
    ax.set_visible(False)

plt.tight_layout()
plt.show()



df_sales = df[df['estado'] != 'refunded'].copy()

# 2. Calcular frecuencia de artículos por pedido
freq = df_sales['articulos_vendidos'].value_counts().sort_index()

# 3. Agrupar categorías menores en “Otros” (por ejemplo, >5)
top_n = 5
main = freq[freq.index <= top_n]
others = freq[freq.index > top_n].sum()
main[f'>{top_n}'] = others

# 4. Pie chart
labels = main.index.astype(str)
sizes  = main.values

plt.figure(figsize=(6,6))
plt.pie(
    sizes,
    labels=labels,
    autopct='%1.1f%%',
    startangle=90,
    counterclock=False
)
plt.title('Distribución de cantidad de productos por pedido')
plt.tight_layout()
plt.show()


# 1. Filtrar ventas efectivas
df_sales = df[df['estado'] != 'refunded'].copy()

# 2. Asegurarse de que 'cupones' no tenga NaN
df_sales['cupones'] = df_sales['cupones'].fillna('Sin_cupon')

# 3. Calcular frecuencia de cada tipo de cupón
freq_cupon = df_sales['cupones'].value_counts().reset_index()
freq_cupon.columns = ['tipo_cupon', 'n_ordenes']

# 4. Calcular porcentaje
freq_cupon['pct_ordenes'] = 100 * freq_cupon['n_ordenes'] / freq_cupon['n_ordenes'].sum()

# 5. Mostrar tabla de conteos y porcentajes
print(freq_cupon)

# 6. Gráfico de barras con porcentajes anotados
plt.figure(figsize=(6,4))
ax = sns.barplot(
    data=freq_cupon,
    x='tipo_cupon',
    y='n_ordenes',
    palette='pastel'
)
plt.title('Distribución de órdenes por tipo de cupón')
plt.xlabel('Tipo de cupón')
plt.ylabel('Número de órdenes')
for i, row in freq_cupon.iterrows():
    ax.text(
        i, row['n_ordenes'] + freq_cupon['n_ordenes'].max()*0.01,
        f"{row['pct_ordenes']:.1f}%",
        ha='center',
        va='bottom',
        fontsize=9
    )
plt.tight_layout()
plt.show()


# 1. Conteo de órdenes por estado
estado_counts = df['estado'].value_counts().reset_index()
estado_counts.columns = ['estado', 'n_ordenes']
estado_counts['pct'] = 100 * estado_counts['n_ordenes'] / estado_counts['n_ordenes'].sum()

# 2. Mostrar tabla
print("Distribución de órdenes por estado:")
print(estado_counts)

# 3. Gráfico de barras
plt.figure(figsize=(8, 4))
ax = sns.barplot(
    data=estado_counts,
    x='estado',
    y='n_ordenes',
    palette='viridis',
    order=['completed', 'processing', 'refunded']  # Orden personalizado
)

# 4. Añadir etiquetas de porcentaje
for i, row in estado_counts.iterrows():
    ax.text(
        i,
        row['n_ordenes'] + 5,  # Offset vertical
        f"{row['pct']:.1f}%",
        ha='center',
        va='bottom',
        fontsize=10
    )

plt.title('Distribución de Órdenes por Estado', fontweight='bold')
plt.xlabel('Estado')
plt.ylabel('Número de Órdenes')
plt.grid(axis='y', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()


df_sales = df[df['estado'] != 'refunded'].copy()

# 2. Asegurar que no hay NaN en cupones y crear flag
df_sales['cupones'] = df_sales['cupones'].fillna('Sin_cupon')
df_sales['usa_cupon'] = df_sales['cupones'] != 'Sin_cupon'

# 3. Mapear usa_cupon a etiquetas más legibles
df_sales['cupón_label'] = df_sales['usa_cupon'].map({True: 'Con cupón', False: 'Sin cupón'})

# 4. Tabla de conteo por cupón y tipo de cliente
tabla = (
    df_sales
    .groupby(['cupón_label','tipo_de_cliente'])
    .size()
    .reset_index(name='n_ordenes')
)

print(tabla)

# 5. Gráfico de barras con hue por tipo de cliente
plt.figure(figsize=(8,5))
ax = sns.barplot(
    data=tabla,
    x='cupón_label',
    y='n_ordenes',
    hue='tipo_de_cliente',
    palette='pastel'
)
plt.title('Órdenes con/sin cupón por tipo de cliente')
plt.xlabel('')
plt.ylabel('Número de órdenes')
plt.legend(title='Tipo de cliente')
plt.tight_layout()
plt.show()


# 1. Filtrar solo órdenes completadas (excluyendo refunded y processing)
df_completed = df[df['estado'] == 'completed'].copy()

# 2. Calcular métricas clave por tipo de cliente
metrics = df_completed.groupby('tipo_de_cliente')['ingresos_netos'].agg(
    ['count', 'mean', 'median', 'std', 'sum']
).rename(columns={
    'count': 'Número de Órdenes',
    'mean': 'Valor Promedio por Orden',
    'median': 'Mediana de Valor',
    'std': 'Desviación Estándar',
    'sum': 'Valor Total Generado'
})

# 3. Formatear los números para mejor visualización
metrics_formatted = metrics.style.format({
    'Valor Promedio por Orden': '${:,.0f}',
    'Mediana de Valor': '${:,.0f}',
    'Desviación Estándar': '${:,.0f}',
    'Valor Total Generado': '${:,.0f}'
})

# Mostrar tabla comparativa
print("Comparación de Valor Neto por Tipo de Cliente:")
display(metrics_formatted)

# 4. Visualización
plt.figure(figsize=(10, 5))

# Boxplot para distribución
plt.subplot(1, 2, 1)
sns.boxplot(
    data=df_completed,
    x='tipo_de_cliente',
    y='ingresos_netos',
    palette='Set2'
)
plt.title('Distribución de Valor por Orden')
plt.xlabel('Tipo de Cliente')
plt.ylabel('Ingresos Netos (USD)')

# Gráfico de barras para comparación de promedios
plt.subplot(1, 2, 2)
sns.barplot(
    data=df_completed,
    x='tipo_de_cliente',
    y='ingresos_netos',
    estimator='mean',
    ci=None,
    palette='pastel'
)
plt.title('Valor Promedio por Orden')
plt.xlabel('Tipo de Cliente')
plt.ylabel('Ingreso Neto Promedio (USD)')

# Añadir etiquetas de valor
avg_values = df_completed.groupby('tipo_de_cliente')['ingresos_netos'].mean()
for i, value in enumerate(avg_values):
    plt.text(i, value + 1000, f'${value:,.0f}', ha='center', va='bottom')

plt.tight_layout()
plt.show()

new = df_completed[df_completed['tipo_de_cliente'] == 'new']['ingresos_netos']
returning = df_completed[df_completed['tipo_de_cliente'] == 'returning']['ingresos_netos']

t_stat, p_value = stats.ttest_ind(new, returning, equal_var=False)
print(f"\nPrueba T (diferencia de medias): p-value = {p_value:.4f}")
if p_value < 0.05:
    print("→ La diferencia es estadísticamente significativa (p < 0.05)")
else:
    print("→ La diferencia NO es estadísticamente significativa")

# 1. Filtrar ventas efectivas
df_sales = df[df['estado'] != 'refunded'].copy()
df_sales['cupones'] = df_sales['cupones'].fillna('Sin_cupon')
df_sales['usa_cupon'] = df_sales['cupones'] != 'Sin_cupon'

# 2. Calcular ticket promedio por grupo
avg_net = df_sales.groupby('usa_cupon')['ingresos_netos'].mean().reset_index()
avg_net['label'] = avg_net['usa_cupon'].map({True: 'Con cupón', False: 'Sin cupón'})

# 3. Mostrar los valores en consola
print(avg_net[['label','ingresos_netos']])

# 4. Gráfico de barras
plt.figure(figsize=(6,4))
ax = sns.barplot(data=avg_net, x='label', y='ingresos_netos', palette='pastel')
plt.title('Valor neto promedio: con vs sin cupón')
plt.xlabel('')
plt.ylabel('Ingreso neto promedio')
for i, row in avg_net.iterrows():
    ax.text(i, row['ingresos_netos'] + avg_net['ingresos_netos'].max()*0.01,
            f"{row['ingresos_netos']:.0f}", ha='center', va='bottom')
plt.tight_layout()
plt.show()


avg_articles_by_state = (
    df
    .groupby('estado')['articulos_vendidos']
    .mean()
    .reset_index()
    .rename(columns={'articulos_vendidos': 'promedio_articulos'})
)

# 2. Mostrar el resultado
print(avg_articles_by_state)

# 3. Graficar para visualizar posibles anomalías
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(6,4))
sns.barplot(
    data=avg_articles_by_state,
    x='estado',
    y='promedio_articulos',
    palette='pastel'
)
plt.title('Promedio de artículos por orden según estado')
plt.xlabel('Estado de la orden')
plt.ylabel('Artículos promedio')
for i, row in avg_articles_by_state.iterrows():
    plt.text(
        i,
        row['promedio_articulos'] + 0.1,
        f"{row['promedio_articulos']:.2f}",
        ha='center',
        va='bottom',
        fontsize=9
    )
plt.tight_layout()
plt.show()

df['cupones'] = df['cupones'].fillna('Sin_cupon')
df['usa_cupon'] = df['cupones'] != 'Sin_cupon'
df['es_refund'] = df['estado'] == 'refunded'

# 2. Filtrar ventas efectivas y returning
df_sales = df[~df['es_refund']]
df_return = df_sales[df_sales['tipo_de_cliente'] == 'returning']

# 3. Cálculos clave para returning
pct_orders_return   = df_return['pedido_numero'].nunique() / df_sales['pedido_numero'].nunique() * 100
pct_revenue_return  = df_return['ingresos_netos'].sum() / df_sales['ingresos_netos'].sum() * 100
coupon_usage_return = df_return['usa_cupon'].mean() * 100
avg_order_value     = df_return['ingresos_netos'].mean()
avg_articles        = df_return['articulos_vendidos'].mean()
state_dist_return   = df_return['estado'].value_counts(normalize=True) * 100

# 4. Mostrar métricas
print(f"% de órdenes returning: {pct_orders_return:.1f}%")
print(f"% de ingresos returning: {pct_revenue_return:.1f}%")
print(f"% uso de cupón (returning): {coupon_usage_return:.1f}%")
print(f"Ticket promedio (returning): {avg_order_value:.0f}")
print(f"Artículos promedio (returning): {avg_articles:.2f}")
print("Distribución de estados (returning):")
print(state_dist_return)

# Filtrar ventas efectivas y returning
df_sales  = df[~df['es_refund']]
df_return = df_sales[df_sales['tipo_de_cliente'] == 'returning']

# Calcular métricas
metrics = {
    "Métrica": [
        "% Órdenes returning",
        "% Ingresos returning",
        "% Uso de cupón (returning)",
        "Ticket promedio (returning)",
        "Artículos promedio (returning)"
    ],
    "Valor": [
        df_return['pedido_numero'].nunique() / df_sales['pedido_numero'].nunique() * 100,
        df_return['ingresos_netos'].sum()   / df_sales['ingresos_netos'].sum()   * 100,
        df_return['usa_cupon'].mean()       * 100,
        df_return['ingresos_netos'].mean(),
        df_return['articulos_vendidos'].mean()
    ]
}

# Crear el DataFrame resumen
summary_df = pd.DataFrame(metrics)

# Formatear los valores
summary_df["Valor"] = summary_df.apply(
    lambda row: f"{row['Valor']:.1f}%" if "%" in row["Métrica"] else f"{row['Valor']:.2f}",
    axis=1
)

# Mostrar la tabla
summary_df



df = df.rename(columns={
    'Fecha': 'fecha',
    'Tipo de cliente': 'tipo_de_cliente',
    'Ingresos netos': 'ingresos_netos',
    'Estado': 'estado',
    'Artículos vendidos': 'articulos_vendidos',
    'Cupón(es)': 'cupones',
    'ID del Cliente': 'id_del_cliente',
    'Pedido #': 'pedido_numero'
})

df['cupones'] = df['cupones'].fillna('Sin_cupon')
df['usa_cupon'] = df['cupones'] != 'Sin_cupon'
df['es_refund'] = df['estado'] == 'refunded'

# Ventas efectivas
df_sales = df[~df['es_refund']].copy()

# Devoluciones
df_refunds = df[df['es_refund']].copy()

# --- 1. Pie chart: % Órdenes con/sin cupón ---
counts = df_sales['usa_cupon'].value_counts()
labels = ['Con cupón','Sin cupón']
sizes  = [counts[True], counts[False]]
plt.figure(figsize=(5,5))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
plt.title('% de órdenes con/sin cupón')
plt.show()

# --- 2. Barplot: frecuencia de cada tipo de cupón ---
cupon_counts = df_sales[df_sales['usa_cupon']]['cupones'].value_counts()
plt.figure(figsize=(6,4))
sns.barplot(x=cupon_counts.index, y=cupon_counts.values, palette='muted')
plt.title('Frecuencia de tipos de cupón en órdenes')
plt.xlabel('Tipo de cupón')
plt.ylabel('Número de órdenes')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


# 1. Filtrar ventas efectivas
df_sales = df[df['estado'] != 'refunded'].copy()
df_sales['cupones'] = df_sales['cupones'].fillna('Sin_cupon')
df_sales['usa_cupon'] = df_sales['cupones'] != 'Sin_cupon'

# 2. Calcular ticket promedio por grupo
avg_net = df_sales.groupby('usa_cupon')['ingresos_netos'].mean().reset_index()
avg_net['label'] = avg_net['usa_cupon'].map({True: 'Con cupón', False: 'Sin cupón'})

# 3. Mostrar los valores en consola
print(avg_net[['label','ingresos_netos']])

# 4. Gráfico de barras
plt.figure(figsize=(6,4))
ax = sns.barplot(data=avg_net, x='label', y='ingresos_netos', palette='pastel')
plt.title('Valor neto promedio: con vs sin cupón')
plt.xlabel('')
plt.ylabel('Ingreso neto promedio')
for i, row in avg_net.iterrows():
    ax.text(i, row['ingresos_netos'] + avg_net['ingresos_netos'].max()*0.01,
            f"{row['ingresos_netos']:.0f}", ha='center', va='bottom')
plt.tight_layout()
plt.show()


# 1. Filtrar solo refunds
df_refunds = df[df['estado']=='refunded'].copy()
df_refunds['usa_cupon'] = df_refunds['cupones'].fillna('Sin_cupon') != 'Sin_cupon'

# 2. Crosstab normalizado asegurando ambas categorías en el índice
tipos = ['new','returning']
usos  = [False, True]

ct = pd.crosstab(
    df_refunds['tipo_de_cliente'],
    df_refunds['usa_cupon'],
    normalize='index'
).reindex(index=tipos, columns=usos, fill_value=0)

# 3. Dibujar heatmap
plt.figure(figsize=(5,3))
sns.heatmap(ct, annot=True, fmt='.0%', cmap='Blues',
            xticklabels=['Sin cupón','Con cupón'],
            yticklabels=['New','Returning'])
plt.title('Refunds: % por tipo de cliente y uso de cupón')
plt.xlabel('Usa cupón')
plt.ylabel('Tipo de cliente')
plt.tight_layout()
plt.show()

